class Node:
    def __init__(self,val):
        self.val = val
        self.next = None

class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.head = None
        self.size = 0

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        if self.head == None or index<0 or index>=self.size:
            return -1
        else:
            count = 0
            cur = self.head
            while index != count:
                cur = cur.next
                count+=1
            return cur.val

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        newHead = Node(val)
        if self.head == None:
            self.head = newHead
        else:
            newHead.next = self.head
            self.head = newHead
        self.size+=1

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        newTail = Node(val)
        if self.head == None:
            self.head = newTail
        else:
            cur = self.head
            while cur.next != None:
                cur = cur.next
            cur.next = newTail
        self.size+=1

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        if index <= 0:
            newHead = Node(val)
            if self.head == None:
                self.head = newHead
            else:
                newHead.next = self.head
                self.head = newHead
        elif index == self.size:
            newTail = Node(val)
            if self.head == None:
                self.head = newTail
            else:
                cur = self.head
                while cur.next != None:
                    cur = cur.next
                cur.next = newTail
        elif index > self.size:
            return -1
        else:
            newNode=Node(val)
            count = 0
            cur = self.head
            while index != count:
                prev = cur
                cur = cur.next
                count+=1
            prev.next = newNode
            newNode.next = cur
        self.size+=1                        

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if self.head == None or index < 0 or index >=self.size:
            return -1
        elif index == 0:
            self.head = self.head.next
            self.head == None 
        else:
            count = 0
            cur=self.head
            while index != count:
                prev = cur
                cur = cur.next
                count+=1
            prev.next = cur.next
            cur.val= None
        self.size-=1
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
